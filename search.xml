<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==" title="https://hexo.io/">Hexo<i class="fa fa-external-link"></i></span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv" title="https://hexo.io/docs/">documentation<i class="fa fa-external-link"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=" title="https://hexo.io/docs/troubleshooting.html">troubleshooting<i class="fa fa-external-link"></i></span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==" title="https://github.com/hexojs/hexo/issues">GitHub<i class="fa fa-external-link"></i></span>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s" title="https://hexo.io/docs/writing.html">Writing<i class="fa fa-external-link"></i></span></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=" title="https://hexo.io/docs/server.html">Server<i class="fa fa-external-link"></i></span></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s" title="https://hexo.io/docs/generating.html">Generating<i class="fa fa-external-link"></i></span></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s" title="https://hexo.io/docs/one-command-deployment.html">Deployment<i class="fa fa-external-link"></i></span></p>
]]></content>
  </entry>
  <entry>
    <title>Ubuntu 安装ROS 踩坑记录及一键安装脚本</title>
    <url>/2020/01/22/Ubuntu-%E5%AE%89%E8%A3%85ROS-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%E5%8F%8A%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="设置源并更新"><a href="#设置源并更新" class="headerlink" title="设置源并更新"></a>设置源并更新</h3><p>将服务器设置为国内的源，这样会比较快一点，如果有vpn更好；ubuntu下如何构建外网，请参考<a href="/2020/01/18/vpn/">此文章</a>; 我用的是阿里云的源。<br><img src="/images/pasted-0.png" alt="upload successful"></p>
<h3 id="安装ROS"><a href="#安装ROS" class="headerlink" title="安装ROS"></a>安装ROS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo sh -c <span class="string">'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" &gt; /etc/apt/sources.list.d/ros-latest.list'</span>122  <span class="comment">#添加源</span></span><br><span class="line">$ sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key421C365BD9FF1F717815A3895523BAEEB01FA116  <span class="comment">#添加密钥</span></span><br><span class="line">$ sudo apt-get update &amp;&amp; sudo apt-get upgrade -y <span class="comment">#更新源</span></span><br><span class="line">$ sudo apt-get install ros-kinetic-desktop-full  <span class="comment">#安装full版的ROS</span></span><br><span class="line">$ sudo rosdep init <span class="comment">#初始化（报错，解决办法见后）</span></span><br><span class="line">$ rosdep update <span class="comment">#更新（报错，解决办法见后）</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"source /opt/ros/kinetic/setup.bash"</span> &gt;&gt; ~/.bashrc</span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>如果想安装其他ROS功能包，可以使用apt-cache命令搜索ros-kinetic开头的所有功能包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt-cache search ros-kinetic</span><br></pre></td></tr></table></figure>
<p>如果想安装个别功能包，请使用如下命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install ros-kinetic-[功能包名称]</span><br></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="sudo-rosdep-init-报错"><a href="#sudo-rosdep-init-报错" class="headerlink" title="sudo rosdep init 报错"></a>sudo rosdep init 报错</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ~/Udi_Depends$ sudo rosdep init</span><br><span class="line">$ Traceback (most recent call last):</span><br><span class="line">$ File <span class="string">"/usr/bin/rosdep"</span>, line 3, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">$ from rosdep2.main import rosdep_main</span><br><span class="line">$ ImportError: No module named <span class="string">'rosdep2'</span></span><br><span class="line">``` </span><br><span class="line">原因：因为安装了新的python没有这个module</span><br><span class="line">方案1：将Ubuntu默认python版本设置为2.7</span><br><span class="line">方案2：输入命令 sudo apt-get install python3-rosdep</span><br><span class="line"><span class="comment">#### rosdep update 一直失败</span></span><br><span class="line">- 检查网络，rosdep update 失败一般是由于网络的原因</span><br><span class="line">- 方案一：换手机网络</span><br><span class="line">- 方案二：更换最佳软件源</span><br><span class="line">- 方案三：换vpn见[链接](/2020/01/18/vpn/)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 验证</span></span><br><span class="line">```bash</span><br><span class="line">$ roscore</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Ubuntu下如何翻墙、免费账号以及用买的服务器搭建</title>
    <url>/2020/01/18/vpn/</url>
    <content><![CDATA[<h3 id="1-写在前面"><a href="#1-写在前面" class="headerlink" title="1.写在前面"></a>1.写在前面</h3><p>echizen君在折腾UBUNTU的时候，也是犯难了，由于各种原因需要一个速率稳定的外网连接，但是奈何echizen君买vpn的时候他就没有ubuntu版本的deb软件。那怎么办呢？后来我才知道买的vpn其实就是买了个服务器而已，有了服务器，一切都好说。他不提供用户界面，网上大神，github大佬早就为我们解决了这个问题了。</p>
<h3 id="2-VPN、SS和SSR"><a href="#2-VPN、SS和SSR" class="headerlink" title="2.VPN、SS和SSR"></a>2.VPN、SS和SSR</h3><h4 id="2-1-VPN"><a href="#2-1-VPN" class="headerlink" title="2.1 VPN"></a>2.1 VPN</h4><p>OpenVPN是一个用于创建虚拟专用网络加密通道的软件包，最早由James Yonan编写。OpenVPN允许创建的VPN使用公开密钥、电子证书、或者用户名／密码来进行身份验证。它大量使用了OpenSSL加密库中的SSLv3/TLSv1协议函数库。当前OpenVPN能在Solaris、Linux、OpenBSD、FreeBSD、NetBSD、Mac OS X与Microsoft Windows以及Android和iOS上运行，并包含了许多安全性的功能。它并不是一个基于Web的VPN软件，也不与IPsec及其他VPN软件包兼容。</p>
<h4 id="2-2-SS"><a href="#2-2-SS" class="headerlink" title="2.2 SS"></a>2.2 SS</h4><p>Shadowsocks（简称SS）是一种基于Socks5代理方式的加密传输协议，也可以指实现这个协议的各种开发包。ss作者是clowwindy，大约两年前，他自己为了科学上网从而写了shadowsocks，简称ss或者叫影梭，后来他觉得这个东西非常好用，速度快，而且不会被封锁，他就把源码共享在了github上，然后就火了，但是后来作者被请去喝茶，删了代码，并且保证不再参与维护更新。现在这个好像是一个国外的大兄弟在维护。当前包使用Python、C、C++、C#、Go语言等编程语言开发，大部分主要实现（iOS平台的除外）采用Apache许可证、GPL、MIT许可证等多种自由软件许可协议开放源代码。Shadowsocks分为服务器端和客户端，在使用之前，需要先将服务器端程序部署到服务器上面，然后通过客户端连接并创建本地代理。</p>
<h4 id="2-3-SSR"><a href="#2-3-SSR" class="headerlink" title="2.3 SSR"></a>2.3 SSR</h4><p>在ss作者被喝茶之后，github上出现了一个叫breakwa11(破娃)的帐号，声称ss容易被防火墙检测到，所以在混淆和协议方面做了改进，更加不容易被检测到，而且兼容ss，改进后的项目叫shadowsocks-R，简称ssr，然后ss用户和ssr用户自然分成了两个派别，互相撕逼，直到前阵子，破娃被人肉出来，无奈之下删除了ssr的代码，并且解散了所有相关群组。</p>
<h4 id="2-4-区别和优缺点"><a href="#2-4-区别和优缺点" class="headerlink" title="2.4 区别和优缺点"></a>2.4 区别和优缺点</h4><p>通过上面的介绍，其实基本已经能看出vpn和ss/ssr的区别了，那么他们到底孰优孰劣。因为vpn是走的专用通道，它是用来给企业传输加密数据用的，所以vpn的流量特征很 明显，以openvpn为例，更详细的在这里不说了，流量特征明显，防火墙直接分析你的流量，如果特征匹配，直接封掉。目前就翻墙来说，PPTP类型的vpn基本死的差不多了，L2TP大部分地区干扰严重很不稳定。ss/ssr的目的就是用来翻墙的，而vpn的目的是用来加密企业数据的，对于vpn来说安全是第一位的，而对于ss/ssr来说穿透防火墙是第一位，抗干扰性强，而且对流量做了混淆，所有流量在通过防火墙的时候，基本上都被识别为普通流量，也就是说你翻墙了，但是政府是检测不到你在翻墙的。两者的出发点着着重点就不同，ss/ssr更注重流量的混淆加密。如果要安全匿名上网，可以用vpn+tor或者ss/ssr+tor。</p>
<h3 id="3-electron-ssr全平台科学上网"><a href="#3-electron-ssr全平台科学上网" class="headerlink" title="3. electron-ssr全平台科学上网"></a>3. electron-ssr全平台科学上网</h3><p>大家都知道在ubuntu上科学上网可以在命令行配置，但是确实是没有windows和mac上图形界面用起来舒服，我找遍了百度和谷歌，唯一一个比较好用的是ShadowSocks QT5,但是他不支持ShadowsockR。而恰好我买的是SSR的账号。所以electron-ssr就成为了我最完美的选择。但是作者不知为何已经关掉了这个项目，所幸有热心的群众备份了最新的版本。废话不多说，赶紧备份一波。</p>
<ul>
<li>地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VjaGl6ZW4tc2hpcGVuZy9lbGVjdHJvbi1zc3ItYmFja3Vw" title="https://github.com/echizen-shipeng/electron-ssr-backup">https://github.com/echizen-shipeng/electron-ssr-backup<i class="fa fa-external-link"></i></span></li>
</ul>
<h4 id="3-1-安装electron-ssr"><a href="#3-1-安装electron-ssr" class="headerlink" title="3.1 安装electron-ssr"></a>3.1 安装electron-ssr</h4><h5 id="安装0-2-6"><a href="#安装0-2-6" class="headerlink" title="安装0.2.6"></a>安装0.2.6</h5><p>从以下地址下载，建议appimage版本，而且直接下的deb软件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;qingshuisiyuan&#x2F;electron-ssr-backup&#x2F;releases</span><br></pre></td></tr></table></figure>
<p>在deb文件所在的文件夹右键打开终端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i electron-ssr-0.2.6.deb</span><br></pre></td></tr></table></figure>
<p>安装成功后，点击左上角搜索 ele 打开程序。安装过程中遇到的问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg: dependency problems prevent configuration of electron-ssr:</span><br><span class="line">electron-ssr depends on libappindicator1; however:</span><br><span class="line">Package libappindicator1 is not installed.</span><br><span class="line">dpkg: error processing package electron-ssr (--install):</span><br><span class="line">dependency problems - leaving unconfigured</span><br><span class="line">Processing triggers for hicolor-icon-theme (0.15-0ubuntu1.1) ...</span><br><span class="line">Processing triggers for bamfdaemon (0.5.3~bzr0+16.04.20180209-0ub</span><br><span class="line">untu1) ...</span><br><span class="line">Rebuilding &#x2F;usr&#x2F;share&#x2F;applications&#x2F;bamf-2.index...</span><br><span class="line">Processing triggers for gnome-menus (3.13.3-6ubuntu3.1) ...</span><br><span class="line">Processing triggers for desktop-file-utils (0.22-1ubuntu5.2) ...</span><br><span class="line">Processing triggers for mime-support (3.59ubuntu1) ...</span><br><span class="line">Errors were encountered while processing:</span><br><span class="line">electron-ssr</span><br></pre></td></tr></table></figure>
<p>解决办法如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install libappindicator1 #安装时又报错误，按照他的提示操作</span><br><span class="line">sudo apt-get -f install   #再安装上面</span><br><span class="line">sudo apt install libappindicator1</span><br><span class="line">sudo dpkg -i electron-ssr-0.2.6.deb</span><br></pre></td></tr></table></figure>

<h5 id="获取shadowfly的配置信息"><a href="#获取shadowfly的配置信息" class="headerlink" title="获取shadowfly的配置信息"></a>获取shadowfly的配置信息</h5><p><img src="/images/pasted-26.png" alt="upload successful"></p>
<p>随意点击一个节点，获得配置信息</p>
<p><img src="/images/pasted-28.png" alt="upload successful"></p>
<h5 id="将配置信息填入electron-ssr的配置信息中"><a href="#将配置信息填入electron-ssr的配置信息中" class="headerlink" title="将配置信息填入electron-ssr的配置信息中"></a>将配置信息填入electron-ssr的配置信息中</h5><p><img src="/images/pasted-27.png" alt="upload successful"></p>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><ul>
<li>点击小飞机，配置，将代理改成全局代理</li>
<li>修改bashrc，加入端口变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gedit ~&#x2F;.bashrc</span><br><span class="line">最后加入</span><br><span class="line">export http_proxy&#x3D;127.0.0.1:12333</span><br><span class="line">export https_proxy&#x3D;127.0.0.1:12333</span><br></pre></td></tr></table></figure>

<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>打开终端，输入以下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget www.google.com</span><br></pre></td></tr></table></figure>
<p>成功返回，大功告成！</p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>vpn</tag>
        <tag>ssr</tag>
      </tags>
  </entry>
</search>
